@page "/"
@rendermode InteractiveServer
@using RaftLibrary

<PageTitle>Home</PageTitle>

<div class="row">
    <div class="col">
        <div>

            <label for="speed">
                Election timeout between @(FormatMilliSeconds(150 * scalar)) and @(FormatMilliSeconds(300 *
                scalar)) seconds


                <input type="range" id="speed" name="speed" min="1" max="150" @bind:event="oninput"
                @bind=scalar @onchange=Update />

            </label>
        </div>
        <div>

            <label for="NetworkRequestDelay">
                Network Delay @FormatMilliSeconds(networkDelay) seconds
                <input type="range" id="NetworkRequestDelay" name="NetworkRequestDelay" min="10" max="10000"
                @bind:event="oninput" @bind=networkDelay @onchange=Update />
            </label>
        </div>
    </div>
</div>
<div class="d-flex d-inline-flex">
    <button @onclick="startSimulation">Start</button>
    @if (Client.Responses.Count > 0)
    {
        <div class="m-2">
            Latest Client Message: @Client.Responses[^1]
        </div>
    }

</div>


<div class="row">

    @foreach (var node in nodes)
    {

        var timeRemaining = node.InnerNode.TimerElapsed() / node.InnerNode.Timer.Interval;
        <div class="p-3 col-4">
            <div class="border p-3 rounded-3">
                <div class="d-flex justify-content-between">
                    <h3>
                        Node @node.Id
                    </h3>
                    @if (node.InnerNode.IsRunning == true)
                    {
                        <button class="btn-outline-danger bg-transparent text-black rounded-3" @onclick="() => node.InnerNode.TogglePause(true)">
                            Pause Node
                        </button>
                    }
                    @if (node.InnerNode.IsRunning == false)
                    {
                        <button class="btn-outline-success bg-transparent text-black rounded-3" @onclick="() => node.InnerNode.TogglePause(false)">
                            Unpause Node
                        </button>
                    }
                </div>
                <div class="@StateClass(node)">
                    @node.InnerNode.State
                </div>
                <div class="@TermClass(node)">
                    Term @node.InnerNode.Term
                </div>
                <div>
                    Leader is @node.InnerNode.LeaderId
                </div>
                <div>
                    Home Delay @networkDelay
                </div>
                <div>
                    <div class="progress" role="progressbar" aria-label="Basic example"
                    aria-valuenow=@(Math.Abs(node.InnerNode.TimerElapsed())) aria-valuemin="0"
                    aria-valuemax="@(node.InnerNode.Timer.Interval)">
                        <div class="progress-bar bg-dark-subtle" style="width: @(timeRemaining * 1000)%;">
                        </div>
                    </div>
                    <div class="row border border-dark mt-4 mb-4 rounded-3">
                        <h4>Log:</h4>
                        @foreach (var log in node.InnerNode.Log)
                        {
                            <div class="d-flex flex-row mr-2">
                                <div>
                                    <div class="mr-4">@log.Command</div>
                                </div>
                                <div>
                                    <div class="text-info">&nbsp;K @log.Key</div>
                                </div>
                                <div>
                                    <div class="text-warning">&nbsp;T @log.Term</div>
                                </div>
                                @if (node.InnerNode.StateMachine.ContainsKey(log.Key))
                                {
                                    <div>
                                        <div class="text-success">&nbsp;Committed</div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>

                <div class="d-block mt-4">
                    <label>
                        Key <input class="form-control" @bind=userInputKey type="number" />
                    </label>
                    <label>
                        Value <input class="form-control" @bind=userInputValue />
                    </label>
                    <button class="d-block mt-4 bg-transparent btn-outline-primary text-black rounded-3" @onclick="() => SendCommand(node.Id)">Send Command!</button>
                </div>

            </div>
        </div>
    }
</div>


@code {
    bool isRunning = false;
    private int scalar = 25;
    private int minInterval = 150;
    private int maxInterval = 301;
    private int networkDelay = 0;
    private Timer? timer;
    List<SimulationNode>? nodes = [];
    int userInputKey;
    string userInputValue = "";
    string commandStatus = "";
    IClient Client = new Client();

    void startSimulation()
    {
        var node1 = new Node([], minInterval * scalar, maxInterval * scalar, ((maxInterval * scalar) / 3), Client);
        var node2 = new Node([], minInterval * scalar, maxInterval * scalar, ((maxInterval * scalar) / 3), Client);
        var node3 = new Node([], minInterval * scalar, maxInterval * scalar, ((maxInterval * scalar) / 3), Client);

        var simulation1 = new SimulationNode(node1, networkDelay);
        var simulation2 = new SimulationNode(node2, networkDelay);
        var simulation3 = new SimulationNode(node3, networkDelay);

        node1.Nodes = [simulation2, simulation3];
        node2.Nodes = [simulation1, simulation3];
        node3.Nodes = [simulation2, simulation1];

        nodes = [simulation1, simulation2, simulation3];

        isRunning = true;

        timer = new Timer(_ =>
        {
            foreach (var node in nodes)
            {
                node.InnerNode.TimerElapsed();
            }
            InvokeAsync(StateHasChanged);
        }, null, 0, 50); 
    }

    async Task SendCommand(int destinationId)
    {
        commandStatus = "sending";
        var dest = nodes.FirstOrDefault(n => n.Id == destinationId);


        var command = new DTOs.ClientCommandData
            {
                requestedKey = userInputKey,
                requestedCommand = userInputValue
            };
        // var command = new ClientCommandData(
        // Type: ClientCommandType.Set,
        // Key: userInputKey,
        // Value: userInputValue,
        // RespondToClient: async (success, leaderId) =>
        // {
        //     commandStatus = $"response was {success}, leader is {leaderId}";
        // });
        await dest.SendClientCommand(command);
    }

    public void Update()
    {
        foreach(var node in nodes)
        {
            node.NetworkDelay = networkDelay;
            node.InnerNode.MinInterval = minInterval * scalar;
            node.InnerNode.MaxInterval = maxInterval * scalar;
            node.InnerNode.LeaderInterval = ((maxInterval * scalar) / 3);
        }
    }


    string TermClass(SimulationNode node)
    {
        var maxTerm = nodes.Select(n => n.InnerNode.Term).Max();
        return "";
    }

    string StateClass(SimulationNode node)
    {
        if (node.InnerNode.State == NodeState.Leader)
            return "text-danger";
        if (node.InnerNode.State == NodeState.Candidate)
            return "text-warning";
        if (node.InnerNode.State == NodeState.Follower)
            return "text-success";
        return "";
    }

    public static string FormatTimeSpan(TimeSpan timeSpan)
    {
        double totalSeconds = timeSpan.TotalSeconds;
        return $"{totalSeconds:F1}";
    }

    public static string FormatMilliSeconds(double milliSeconds)
    {
        return $"{milliSeconds / 1000.0:F1}";
    }
}